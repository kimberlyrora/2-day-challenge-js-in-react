{"version":3,"sources":["../../my/src/clock.jsx","../../my/src/App.js","../../my/src/serviceWorker.js","../../my/src/index.js"],"names":["Clock","window","addEventListener","secondHand","document","querySelector","console","log","setInterval","now","Date","secondsDegrees","getSeconds","style","transition","transform","concat","minHand","minutesDegrees","getMinutes","hourHand","hoursDegrees","getHours","react_default","a","createElement","className","App","src_clock","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA6CeA,cA1CD,WA8Bb,OA7BAC,OAAOC,iBAAiB,OAAQ,WAChC,IAAMC,EAAaC,SAASC,cAAc,gBAC3CC,QAAQC,IAAIJ,GAyBZK,YAxBgB,WACf,IAAMC,EAAM,IAAIC,KAEVC,EADSF,EAAIG,aACgB,GAAM,IAAO,GAC1B,KAAnBD,GACFR,EAAWU,MAAMC,WAAjB,KACAX,EAAWU,MAAME,UAAjB,UAAAC,OAAuCL,EAAvC,UAEAR,EAAWU,MAAMC,WAAjB,QACAX,EAAWU,MAAME,UAAjB,UAAAC,OAAuCL,EAAvC,SAEF,IAAMM,EAAUb,SAASC,cAAc,aAEhCa,EADST,EAAIU,aACgB,GAAM,IAAO,GAE/CF,EAAQJ,MAAME,UAAd,UAAAC,OAAoCE,EAApC,QAED,IAAME,EAAWhB,SAASC,cAAc,cAElCgB,EADOZ,EAAIa,WACc,GAAM,IAAO,GAE3CF,EAASP,MAAME,UAAf,UAAAC,OAAqCK,EAArC,SAGmB,OAGnBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCC7BLC,MANf,WACE,OACEJ,EAAAC,EAAAC,cAACG,EAAD,OCMgBC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAS/B,SAASgC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0230aed2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './clock.css'\r\n\r\nconst Clock = () => {\r\n\twindow.addEventListener('load', () => {\r\n\tconst secondHand = document.querySelector('.second-hand');\r\nconsole.log(secondHand); \r\nconst setDate = () => {\r\n\tconst now = new Date();\r\n\tconst seconds= now.getSeconds();\r\n\tconst secondsDegrees = ((seconds / 60) * 360) + 90;\r\n\tif(secondsDegrees === 90){\r\n\t\tsecondHand.style.transition = `0s`;\r\n\t\tsecondHand.style.transform = `rotate(${secondsDegrees}deg)`;\r\n\t} else {\r\n\t\tsecondHand.style.transition = `0.05s`;\r\n\t\tsecondHand.style.transform = `rotate(${secondsDegrees}deg)`;\r\n\t}\r\nconst minHand = document.querySelector('.min-hand');\r\n\tconst minutes= now.getMinutes();\r\n\tconst minutesDegrees = ((minutes / 60) * 360) + 90;\r\n\t// if(minutesDegrees !== 90){\r\n\t\tminHand.style.transform = `rotate(${minutesDegrees}deg)`;\r\n\t\t// }\r\n\tconst hourHand = document.querySelector('.hour-hand');\r\n\tconst hours= now.getHours();\r\n\tconst hoursDegrees = ((hours / 12) * 360) + 90;\r\n\t// if(hoursDegrees !== 90){\r\n\t\thourHand.style.transform = `rotate(${hoursDegrees}deg)`;\r\n\t// }\r\n}\r\nsetInterval(setDate, 1000);\r\n})\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"clock\">\r\n\t\t\t\t<div className=\"clock-face\">\r\n\t\t\t\t\t<div className=\"hand hour-hand\"></div>\r\n\t\t\t\t\t<div className=\"hand min-hand\"></div>\r\n\t\t\t\t\t<div className=\"hand second-hand\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\nexport default Clock;","import React from 'react';\nimport Clock from './clock'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Clock />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}